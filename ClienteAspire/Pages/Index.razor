@page "/"
@using ClienteAspire.Modelos
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@inject HttpClient _httpclient
@attribute [Authorize]




<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    .mud-input.mud-input-underline:after {
        border-bottom: 2px solid var(--mud-palette-tertiary) !important;
    }
</style>

@*Agrupar*@
<div class="d-flex row">
    <MudChipSet AllClosable="true" Class="col-auto mt-3" OnClose="CerrarAgrupar">
        @foreach (var value in agrupacionesList)
        {
            <MudChip Color="Color.Tertiary" Text="@value"></MudChip>
        }
    </MudChipSet>
    
    <MudItem xs="12" sm="6" md="2" Class="mr-auto">
    @if (MostrarAgrupar)
    {
            <MudSelect T="string" Label="Campo a Agrupar" SelectedValuesChanged="AplicarAgrupar" Variant="Variant.Text" @bind-Value="CampoAgrupar" OffsetY="true" Margin="Margin.Dense" Dense="true">
                @foreach (var campoModelo in camposModeloAgruparList)
                {
                    <MudSelectItem Value="campoModelo" />
                }
            </MudSelect>
    }
    else
    {
        <div class="mr-auto mt-3 col-2">

            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" aria-label="add" Color="Color.Tertiary" OnClick="Agrupar">Agrupar</MudButton>
        </div>
    }
   </MudItem>

</div>

@*Filtrar*@
<div class="row">
    <MudChipSet AllClosable="true" Class="col-auto " OnClose="CerrarFiltrar">
        @foreach (var filter in filtrosList)
        {
            <MudChip Color="Color.Primary" Class="@filter" Text="@filter.Replace(",", "")"></MudChip>
        }
    </MudChipSet>

    <MudItem Class="col-4 mr-auto">
        @if (string.IsNullOrEmpty(CampoFiltrar))
        {
          <MudMenu FullWidth="true" MaxHeight="200" Style="width:150px;" Dense="true">
            <ActivatorContent>
                <MudButton Variant="Variant.Text" Class="mb-1" StartIcon="@Icons.Material.Filled.FilterList" aria-label="add" Color="Color.Primary">Filtrar</MudButton>
            </ActivatorContent>
            <ChildContent>
                @foreach (var campoModelo in modFiltroList.Where(x => x.EstaVisible).Select(x=>x.NombrePropiedad))
                {
                    <MudMenuItem OnClick="() => PonerCondiciones(campoModelo)">@campoModelo</MudMenuItem>
                }
            </ChildContent>
            </MudMenu>
        }
        else
        {
            <div class="d-flex row" style="margin-top:-11px;">
                <div class="col-auto ">
                <MudSelect T="string"  Variant="Variant.Text" @bind-Value="@CampoFiltrar" SelectedValuesChanged="SelectedValuesChanged" OffsetY="true" Margin="Margin.Dense" Dense="true">
                    @foreach (var condiciones in condicionesShowList)
                        {
                            <MudSelectItem Value="@condiciones">@condiciones.Replace(",", "")</MudSelectItem>
                        }
                </MudSelect>
                </div>
           
                <div class="col-3 mr-auto" >
                    @if(EsFecha)
                    {
                        <div style="margin-top:-6px;">
                            @if (EsRangoFecha)
                            {
                                <div style="width:240px;">
                                    <MudDateRangePicker Label="Seleccione Rango de Fecha" DateFormat="dd/MM/yyyy" Elevation="12" DateRangeChanged="RangoFechaCambiada" />
                                </div>
                            }
                            else
                            {
                                <div style="width: 173px;">
                                <MudDatePicker DateChanged="FechaCambiada" DisableToolbar="true" Elevation="12" DateFormat="dd/MM/yyyy" Placeholder="Seleccione Fecha" />
                                </div >
                            }
                        </div >

                    }
                    else
                    {
                    <MudTextField  @bind-Value="buscarString"  OnBlur="FilterFunc" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    }

                </div>
            </div>
            
        }        
    </MudItem>
</div>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="auto" FixedHeader="true"
          Items="@FilterElements"
          Class="mt-3"
          GroupBy="@(agrupacionesList.Any() ?_groupDefinition : null)"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="true">
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.Action)">Accion</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.TableName)">Nombre de Tabla</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.OldValues)">Viejos Valores</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.NewValues)">Nuevos Valores</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.MachineDate)">Fecha Maquina</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.SystemDate)">Fecha Sistema</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.UserName)">Nombre Usuario</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.OfficeId)">Id Oficina</MudTableSortLabel></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="9">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Accion">@context.Action</MudTd>
        <MudTd DataLabel="Nombre de Tabla">@context.TableName</MudTd>
        <MudTd DataLabel="Viejos Valores">@context.OldValues</MudTd>
        <MudTd DataLabel="Nuevos Valores">@context.NewValues</MudTd>
        <MudTd DataLabel="Fecha Maquina'">@context.MachineDate.ToString(FORMATO_FECHA)</MudTd>
        <MudTd DataLabel="Fecha Sistema">@context.SystemDate.ToString(FORMATO_FECHA)</MudTd>
        <MudTd DataLabel="Nombre Usuario">@context.UserName</MudTd>
        <MudTd DataLabel="Id Oficina">@context.OfficeId</MudTd>

    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="9">Total: @context.Items.Count()</MudTh>
    </GroupFooterTemplate>
</MudTable>

@code {
    public bool MostrarAgrupar { get; set; } = false;
    public bool MostrarFiltrar { get; set; } = false;
    public string CampoAgrupar { get; set; }
    public string CampoFiltrar { get; set; }
    public string Condicion { get; set; }
    private string buscarString = "";
    public string ValorAFiltrar { get; set; }
    public bool DisabledButton { get; set; } = true;
    List<string> agrupacionesList = new List<string>();
    List<string> filtrosList = new List<string>();
    List<string> camposModeloAgruparList = new List<string>();
    List<string> condicionesList = new();
    List<string> condicionesDateList = new();
    List<string> condicionesShowList = new();
    Dictionary<string, string> FiltroDict = new();
    List<ModeloFiltro> modFiltroList = new();
    public bool EsFecha = false;
    public bool EsRangoFecha = false;
    public DateTime? dateToFilter = null;
    public DateRange rangoFecha = new DateRange(DateTime.Now.AddDays(-5).Date, DateTime.Now.Date);
    const string FORMATO_FECHA = "dd/MM/yyyy";

    public TableGroupDefinition<AuditLog> _groupDefinition;

    private IEnumerable<AuditLog> Elements = new List<AuditLog>();
    private List<AuditLog> FilterElements = new List<AuditLog>();

    protected override async Task OnInitializedAsync()
    {
        InicializarElementos();

    }

    public void InicializarElementos()
    {
        Elements = new List<AuditLog>
         {
             new AuditLog()
             {
                 Id=1, Action="Abrir", TableName="Nomina", OldValues="A", NewValues="B", MachineDate=new DateTime(2021, 6, 4),
                 SystemDate=new DateTime(2022, 1, 4), UserName="Admin", OfficeId="Matriz"
             },
              new AuditLog()
             {
                 Id=2, Action="Cerrar", TableName="Componente", OldValues="C", NewValues="D", MachineDate=new DateTime(2021, 10, 4),
                 SystemDate=new DateTime(2021, 9, 4), UserName="Carrillo", OfficeId="Matriz"
             },
              new AuditLog()
             {
                 Id=3, Action="permanece", TableName="Componente", OldValues="F", NewValues="G", MachineDate=new DateTime(2021, 8, 4),
                 SystemDate=new DateTime(2021, 9, 4), UserName="Admin", OfficeId="Checa"
             }
         };
        modFiltroList = new List<ModeloFiltro>()
            {
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.Id), NombrePropiedad="Id", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true},
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.Action), NombrePropiedad="Accion", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.TableName), NombrePropiedad="Nombre de Tabla", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.OldValues), NombrePropiedad="Viejos Valores", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.NewValues), NombrePropiedad="Nuevos Valores", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.MachineDate), NombrePropiedad="Fecha Maquina", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.SystemDate), NombrePropiedad="Fecha Sistema", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.UserName), NombrePropiedad="Nombre Usuario", Condicion = string.Empty, ValorBusqueda = string.Empty , EstaVisible=true},
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.OfficeId), NombrePropiedad="Id Oficina", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true }
            };
        condicionesList = new List<string>() {"Contiene", "No Es Igual", "Comienza Con", "Es Igual", "Termina Con" };
        condicionesDateList = new List<string>() {"Igual", "Mayor Que", "Menor Que", "Rango"};
        FilterElements = new List<AuditLog>(Elements);
        camposModeloAgruparList = new List<string>()
            {
                "Id","Accion","Nombre de Tabla","Viejos Valores","Nuevos Valores","Fecha Máquina","Fecha Sistema","Nombre Usuario","Id Oficina"
            };
    }

    public void Agrupar()
    {
        MostrarAgrupar = true;
    }

    public void AplicarAgrupar()
    {
        MostrarAgrupar = false;
        agrupacionesList.Add($"{CampoAgrupar}");
        _groupDefinition = ObtenerGrupos(agrupacionesList);
        camposModeloAgruparList.Remove(CampoAgrupar);
        CampoAgrupar = string.Empty;
        StateHasChanged();
    }

    public void CerrarAgrupar(MudChip chip)
    {
        camposModeloAgruparList.Add(chip.Text);
        agrupacionesList.Remove(chip.Text);
        _groupDefinition = ObtenerGrupos(agrupacionesList);
        StateHasChanged();
    }

    public TableGroupDefinition<AuditLog> ObtenerGrupos(List<string> valoresSeleccionado)
    {
        string valorSeleccionado = string.Empty;
        if (valoresSeleccionado.Any())
        {
            valorSeleccionado = valoresSeleccionado[0];
        }
        switch (valorSeleccionado)
        {
            case "Id":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Id",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.Id),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Acciones":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Acciones",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.Action),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Nombre de Tabla":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Nombre de Tabla",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.TableName),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Viejos Valores":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Viejos Valores",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.OldValues),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Nuevos Valores":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Nuevos Valores",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.NewValues),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Nombre Usuario":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Nombre Usuario",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.UserName),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Id Oficina":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Id Oficina",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.OfficeId),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            default:
                {
                    return null;
                    break;
                }

        }
    }

    public void SelectedValuesChanged()
    {
        EsRangoFecha = CampoFiltrar.Contains("Rango") ? true : false;
    }


    public void PonerCondiciones(string campoModelo)
    {
        if (campoModelo.Contains("Fecha"))
        {
            EsFecha = true;
            condicionesShowList=condicionesDateList.Select(x =>  $"{campoModelo}, {x}, ").ToList();            
        }
        else
        {
            EsFecha = false;
            condicionesShowList=condicionesList.Select(x =>  $"{campoModelo}, {x}, ").ToList();
        }

        CampoFiltrar = condicionesShowList.FirstOrDefault();
        buscarString = string.Empty;
    }


    public void CerrarFiltrar(MudChip chip)
    {
        filtrosList.Remove(chip.Class);
        var propiedadFiltrar = BorrarTodosLosCaracteresDespuesDe(',', chip.Class);
        var indicePropiedadQuitarFiltro = modFiltroList.Select(x => x.NombrePropiedad).IndexOf(propiedadFiltrar); 
        modFiltroList[indicePropiedadQuitarFiltro].EstaVisible=true;
        modFiltroList[indicePropiedadQuitarFiltro].Condicion = string.Empty;
        TraerElementosFiltrados(indicePropiedadQuitarFiltro, string.Empty);
    }

    public void FechaCambiada(DateTime? value)
    {
        dateToFilter = value;
        FilterFunc();
    }
    public void RangoFechaCambiada(DateRange value)
    {
        rangoFecha = value;
        FilterFunc();
    }


    private void FilterFunc()
    {
        FilterElements = new List<AuditLog>(Elements);
        string FiltroAplicar = string.Empty;
        int indicePropiedadFiltrar = -1;

        if(!string.IsNullOrEmpty(CampoFiltrar) && (!string.IsNullOrEmpty(buscarString) || EsFecha))
        {
            var strToAdd = dateToFilter != null ? dateToFilter?.ToString(FORMATO_FECHA) ?? DateTime.Today.ToString(FORMATO_FECHA) : buscarString;
            if(dateToFilter != null)
            {
                strToAdd = dateToFilter?.ToString(FORMATO_FECHA) ?? DateTime.Today.ToString(FORMATO_FECHA);
            }
            else if (rangoFecha!=null)
            {
                strToAdd = rangoFecha.Start?.ToString(FORMATO_FECHA) + " -> " + rangoFecha.End?.ToString(FORMATO_FECHA);
            }
            else
            {
                strToAdd=buscarString;
            }
            EsRangoFecha = false;
            FiltroAplicar = CampoFiltrar + strToAdd;
            filtrosList.Add($"{FiltroAplicar}");
            var propiedadFiltrar = BorrarTodosLosCaracteresDespuesDe(',', FiltroAplicar);
            indicePropiedadFiltrar = modFiltroList.Select(x => x.NombrePropiedad).IndexOf(propiedadFiltrar); 
            modFiltroList[indicePropiedadFiltrar].EstaVisible=false;
            CampoFiltrar = string.Empty;
            modFiltroList[indicePropiedadFiltrar].Condicion = ExtraerCadenaEntreDosComas(FiltroAplicar).Trim();
            TraerElementosFiltrados(indicePropiedadFiltrar, strToAdd);
        }
    }

    public void TraerElementosFiltrados(int index, string valorActualizar)
    {
        if (index >= 0)
        {
            modFiltroList[index].ValorBusqueda = valorActualizar;
            FilterElements = AplicarFiltrar(Elements.ToList(), modFiltroList);
            dateToFilter = null;
            rangoFecha = null;
            buscarString = string.Empty;
        }
        StateHasChanged();
    }

    private string BorrarTodosLosCaracteresDespuesDe(char caracter, string cadena)
    {
        string cadenaDevolver = string.Empty;
        int index = cadena.IndexOf(caracter);
        if (index >= 0)
        {
            cadenaDevolver=cadena.Substring(0, index).Trim();
        }
        return cadenaDevolver;
    }

    private string ExtraerCadenaEntreDosComas(string cadena)
    {
        int sFrom = cadena.IndexOf(",") + 1;
        int sTo = cadena.LastIndexOf(",");
        return cadena.Substring(sFrom, sTo-sFrom);
    }

    private  List<AuditLog> AplicarFiltrar(List<AuditLog> elementos, List<ModeloFiltro> modFiltroList)
    {
        List<AuditLog> listaElementosfiltrados = new List<AuditLog>(elementos);
        foreach(var modFil in modFiltroList)
        {
            if (!string.IsNullOrEmpty(modFil.ValorBusqueda.Trim()))
            {
                switch (modFil.Condicion)
                {
                    case "Contiene":
                        {
                            listaElementosfiltrados = listaElementosfiltrados
                            .Where(e => e.GetType().GetProperty(modFil.PropiedadLog).GetValue(e).ToString().ToLower()
                            .Contains(modFil.ValorBusqueda.ToLower(), StringComparison.Ordinal)).ToList();
                            break;
                        }
                    case "Es Igual":
                        {
                            listaElementosfiltrados = listaElementosfiltrados
                            .Where(e => e.GetType().GetProperty(modFil.PropiedadLog).GetValue(e).ToString().ToLower()==(modFil.ValorBusqueda.ToLower()))
                            .ToList();
                            break;
                        }
                    case "No Es Igual":
                        {
                            listaElementosfiltrados = listaElementosfiltrados
                            .Where(e => e.GetType().GetProperty(modFil.PropiedadLog).GetValue(e).ToString().ToLower()!=(modFil.ValorBusqueda.ToLower()))
                            .ToList();
                            break;
                        }
                    case "Comienza Con":
                        {
                            listaElementosfiltrados = listaElementosfiltrados
                            .Where(x => x.GetType().GetProperty(modFil.PropiedadLog).GetValue(x).ToString().ToLower().StartsWith(modFil.ValorBusqueda.ToLower()))
                            .ToList();
                            break;
                        }
                    case "Termina Con":
                        {
                            listaElementosfiltrados = listaElementosfiltrados
                            .Where(x => x.GetType().GetProperty(modFil.PropiedadLog).GetValue(x).ToString().ToLower().EndsWith(modFil.ValorBusqueda.ToLower()))
                            .ToList();
                            break;
                        }
                    case "Igual":
                        {
                            
                            var fechaAComparar = DateTime.ParseExact(modFil.ValorBusqueda, FORMATO_FECHA, CultureInfo.InvariantCulture).Date;
                            listaElementosfiltrados= listaElementosfiltrados
                              .Where(x => DateTime.Equals(Convert.ToDateTime(x.GetType().GetProperty(modFil.PropiedadLog).GetValue(x).ToString()).Date,fechaAComparar))
                              .ToList();
                              break;
                          }
                    case "Mayor Que":
                          {
                              var fechaAComparar = DateTime.ParseExact(modFil.ValorBusqueda, FORMATO_FECHA, CultureInfo.InvariantCulture).Date;
                              listaElementosfiltrados = listaElementosfiltrados
                              .Where(x => DateTime.Compare(DateTime.Parse(x.GetType().GetProperty(modFil.PropiedadLog).GetValue(x).ToString()), fechaAComparar) > 0)
                              .ToList();
                              break;
                          }
                    case "Menor Que":
                          {
                               var fechaAComparar = DateTime.ParseExact(modFil.ValorBusqueda, FORMATO_FECHA, CultureInfo.InvariantCulture).Date;
                              listaElementosfiltrados = listaElementosfiltrados
                              .Where(x => DateTime.Compare((DateTime)x.GetType().GetProperty(modFil.PropiedadLog).GetValue(x), fechaAComparar)< 0)
                              .ToList();
                              break;
                          }
                    case "Rango":
                          {
                              var dates = modFil.ValorBusqueda.Split(new string[] { " -> " }, StringSplitOptions.RemoveEmptyEntries);
                               var startDate = DateTime.ParseExact(dates[0], FORMATO_FECHA,CultureInfo.InvariantCulture);
                               var endDate = DateTime.ParseExact(dates[1],FORMATO_FECHA ,CultureInfo.InvariantCulture);
                              listaElementosfiltrados = listaElementosfiltrados
                              .Where(x => DateTime.Compare(DateTime.Parse(x.GetType().GetProperty(modFil.PropiedadLog).GetValue(x).ToString()), endDate) <= 0 
                              && DateTime.Compare((DateTime)x.GetType().GetProperty(modFil.PropiedadLog).GetValue(x), startDate) >= 0 )
                              .ToList();
                              break;
                          }
                      default:
                          break;

                  }
              }
          }
          return listaElementosfiltrados;
      }
}