@page "/"
@using ClienteAspire.Modelos
@using FBS_ComponentesDinamicos.Entidades.Autenticacion
@using FBS_ComponentesDinamicos.Sevices
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using System.Net.Http.Headers
@using Newtonsoft.Json
@inject HttpClient _httpclient
@inject IHttpService _httpService
@attribute [Authorize]
@inject ILocalStorageService _localStorageService
@inject Sotsera.Blazor.Toaster.IToaster _toaster



@*Agrupar*@
<div class="d-flex row">
    <MudChipSet AllClosable="true" Class="col-auto mt-3"  OnClose="CerrarAgrupar">
        @foreach (var value in agrupacionesList)
        {
            <MudChip Color="Color.Primary" Text="@value"></MudChip>
        }
    </MudChipSet>
    
    <MudItem Class="col-auto mr-auto pl-0">
    @if (MostrarAgrupar)
    {
            <MudSelect T="string" Label="Campo a Agrupar" SelectedValuesChanged="AplicarAgrupar" Variant="Variant.Text" @bind-Value="CampoAgrupar" OffsetY="true" Margin="Margin.Dense" Dense="true">
                @foreach (var campoModelo in camposModeloAgruparList)
                {
                    <MudSelectItem Value="campoModelo" />
                }
            </MudSelect>
    }
    else
    {
        <div class="mr-auto mt-3 col-2" style="margin-left:-16px;">

            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" aria-label="add" Color="Color.Primary" OnClick="Agrupar">Agrupar</MudButton>
        </div>
    }
   </MudItem>

</div>

@*Filtrar*@
<div class="row mt-1" >
    <MudChipSet AllClosable="true" Class="col-auto " OnClose="CerrarFiltrar">
        @foreach (var filter in filtrosList)
        {
            <MudChip Color="Color.Tertiary" Class="@filter" Text="@filter.Replace(",", "")"></MudChip>
        }
    </MudChipSet>

    <MudItem Class="col-auto mr-auto pl-0" id="filtrado-items">
        @if (string.IsNullOrEmpty(CampoFiltrar))
        {
          <MudMenu FullWidth="true" MaxHeight="200" Style="width:150px;" Dense="true">
            <ActivatorContent>
                <MudButton Variant="Variant.Text" Class="mb-1" StartIcon="@Icons.Material.Filled.FilterList" aria-label="add" Color="Color.Tertiary">Filtrar</MudButton>
            </ActivatorContent>
            <ChildContent>
                @foreach (var campoModelo in modFiltroList.Where(x => x.EstaVisible).Select(x=>x.NombrePropiedad))
                {
                    <MudMenuItem OnClick="() => PonerCondiciones(campoModelo)">@campoModelo</MudMenuItem>
                }
            </ChildContent>
            </MudMenu>
        }
        else
        {
            <div class="d-flex row" style="margin-top:-11px;">
                <div class="col-auto ">
                <MudSelect T="string"  Variant="Variant.Text" @bind-Value="@CampoFiltrar" SelectedValuesChanged="SelectedValuesChanged" OffsetY="true" Margin="Margin.Dense" Dense="true">
                    @foreach (var condiciones in condicionesShowList)
                        {
                            <MudSelectItem Value="@condiciones">@condiciones.Replace(",", "")</MudSelectItem>
                        }
                </MudSelect>
                </div>
           
                <div class="col-3 mr-auto" >
                    @if(EsFecha)
                    {
                        <div style="margin-top:-6px;">
                            @if (EsRangoFecha)
                            {
                                <div style="width:240px;">
                                    <MudDateRangePicker Label="Seleccione Rango de Fecha" Color="Color.Tertiary" DateFormat="@Constantes.FORMATO_FECHA" Elevation="12" DateRangeChanged="RangoFechaCambiada" />
                                </div>
                            }
                            else
                            {
                                <div style="width: 173px;">
                                <MudDatePicker DateChanged="FechaCambiada" DisableToolbar="true" Color="Color.Tertiary" Elevation="12" DateFormat="@Constantes.FORMATO_FECHA" Placeholder="Seleccione Fecha" />
                                </div >
                            }
                        </div >

                    }
                    else
                    {
                    <MudTextField  @bind-Value="buscarString"  OnBlur="FilterFunc" Placeholder="Buscar" Adornment="Adornment.Start" 
                    AdornmentIcon="@Icons.Material.Filled.Search"  FullWidth="true" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    }

                </div>
            </div>
            
        }        
    </MudItem>
</div>

<MudTable Hover="true" Loading="_loading" Striped="true" Breakpoint="Breakpoint.Sm"  Height="auto" FixedHeader="true"
          Items="@Elements"
          Class="mt-3"
          GroupBy="@(agrupacionesList.Any() ?_groupDefinition : null)"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="true">
    <ColGroup>
        <col style="width: 10px;" />
        <col style="width: 10px;"/>
        <col style="width: 10px;"/>
        <col style="width: 10px;"/>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.Accion)">Accion</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.NombreTabla)">Nombre de Tabla</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.ValorAnterior)">Valor Anterior</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.ValorNuevo)">Valor Nuevo</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.FechaMaquina)">Fecha Maquina</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.FechaSistema)">Fecha Sistema</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.InterfazCliente)">Interfaz Cliente</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.CodigoUsuario)">Código Usuario</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.RegistroValido)">Registro Válido</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.NombreOficina)">Nombre Oficina</MudTableSortLabel></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="10">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd  DataLabel="Accion">@context.Accion</MudTd>
        <MudTd DataLabel="Nombre de Tabla">@context.NombreTabla</MudTd>
        <MudTd Style="width:10px;" DataLabel="Valor Anterior">@context.ValorAnterior</MudTd>
        <MudTd Style="width:10px;" DataLabel="Valor Nuevo">@context.ValorNuevo</MudTd>
        <MudTd DataLabel="Fecha Maquina'">@context.FechaMaquina.ToString(Constantes.FORMATO_FECHA)</MudTd>
        <MudTd DataLabel="Fecha Sistema">@context.FechaSistema.ToString(Constantes.FORMATO_FECHA)</MudTd>
        <MudTd DataLabel="Interfaz Cliente">@context.InterfazCliente</MudTd>
        <MudTd DataLabel="Código Usuario">@context.CodigoUsuario</MudTd>
        <MudTd DataLabel="Registro Válido">@context.RegistroValido</MudTd>
        <MudTd DataLabel="Nombre Oficina">@context.NombreOficina</MudTd>

    </RowTemplate>
    
    <PagerContent >
        <div class="d-flex flex-column align-end mt-3 pb-3">
            <MudPagination  Color="Color.Primary" Count="4"  SelectedChanged="async (int numberOfPage)=> await ObtenerElementos(numberOfPage)"/>
       </div>
    </PagerContent>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="10">Total: @context.Items.Count()</MudTh>
    </GroupFooterTemplate>

    
   
</MudTable>


    

@code {
    public bool MostrarAgrupar { get; set; } = false;
    public string CampoAgrupar { get; set; }
    public string CampoFiltrar { get; set; }
    private string buscarString = string.Empty;
    public string ValorAFiltrar { get; set; }
    List<string> agrupacionesList = new List<string>();
    List<string> filtrosList = new List<string>();
    List<string> camposModeloAgruparList = new List<string>();
    List<string> condicionesList = new();
    List<string> condicionesDateList = new();
    List<string> condicionesShowList = new();
    List<ModeloFiltro> modFiltroList = new();
    public bool EsFecha = false;
    public bool EsRangoFecha = false;
    public DateTime? dateToFilter = null;
    public DateRange? rangoFecha;
    private int _selected=1;
    public const int NUMBER_ELEMENTS_PAGE = 10;
    private bool _loading = true;
    public string FiltroGeneral = string.Empty;


    public TableGroupDefinition<AuditLog> _groupDefinition;

    private IEnumerable<AuditLog> Elements = new List<AuditLog>();

    protected override async Task OnInitializedAsync()
    {
        InicializarElementos();

    }



    public async Task InicializarElementos()
    {
        await ObtenerElementos();

        modFiltroList = new List<ModeloFiltro>()
            {
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.Accion), NombrePropiedad="Accion", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.NombreTabla), NombrePropiedad="Nombre de Tabla", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.ValorAnterior), NombrePropiedad="Valor Anterior", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.ValorNuevo), NombrePropiedad="Valor Nuevo", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.FechaMaquina), NombrePropiedad="Fecha Maquina", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.FechaSistema), NombrePropiedad="Fecha Sistema", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.CodigoUsuario), NombrePropiedad="Codigo Usuario", Condicion = string.Empty, ValorBusqueda = string.Empty , EstaVisible=true},
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.NombreOficina), NombrePropiedad="Nombre Oficina", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true },
                new ModeloFiltro(){PropiedadLog = nameof(AuditLog.InterfazCliente), NombrePropiedad="Interfaz Cliente", Condicion = string.Empty, ValorBusqueda = string.Empty, EstaVisible=true }
            };
        condicionesList = new List<string>() {"Contiene", "No Es Igual", "Comienza Con", "Es Igual", "Termina Con" };
        condicionesDateList = new List<string>() {"Igual", "Mayor Que", "Menor Que", "Rango"};

        camposModeloAgruparList = new List<string>()
            {
                "Accion","Nombre de Tabla","Valor Anterior","Valor Nuevo", "Interfaz Cliente", "Codigo Usuario","Nombre Oficina", "Registro Válido"
            };
        StateHasChanged();
    }

    public void Agrupar()
    {
        MostrarAgrupar = true;
    }

    public void AplicarAgrupar()
    {
        MostrarAgrupar = false;
        agrupacionesList.Add($"{CampoAgrupar}");
        _groupDefinition = ObtenerGrupos(agrupacionesList);
        camposModeloAgruparList.Remove(CampoAgrupar);
        CampoAgrupar = string.Empty;
        StateHasChanged();
    }

    public void CerrarAgrupar(MudChip chip)
    {
        camposModeloAgruparList.Add(chip.Text);
        agrupacionesList.Remove(chip.Text);
        _groupDefinition = ObtenerGrupos(agrupacionesList);
        StateHasChanged();
    }

    public TableGroupDefinition<AuditLog> ObtenerGrupos(List<string> valoresSeleccionado)
    {
        string valorSeleccionado = string.Empty;
        if (valoresSeleccionado.Any())
        {
            valorSeleccionado = valoresSeleccionado[0];
        }
        switch (valorSeleccionado)
        {

            case "Accion":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Accion",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.Accion),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Nombre de Tabla":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Nombre de Tabla",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.NombreTabla),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Valor Anterior":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Valor Anterior",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.ValorAnterior),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Valor Nuevo":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Valor Nuevo",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.ValorNuevo),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Codigo Usuario":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Codigo Usuario",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.CodigoUsuario),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Nombre Oficina":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Nombre Oficina",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.NombreOficina),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Registro Válido":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Registro Válido",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.RegistroValido),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            case "Interfaz Cliente":
                {
                    return new TableGroupDefinition<AuditLog>()
                        {
                            GroupName = "Interfaz Cliente",
                            Indentation = true,
                            Expandable = true,
                            IsInitiallyExpanded = false,
                            Selector = new Func<AuditLog, object>(x => x.InterfazCliente),
                            InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                        };
                    break;
                }
            default:
                {
                    return null;
                    break;
                }

        }
    }

    public void SelectedValuesChanged()
    {
        EsRangoFecha = CampoFiltrar.Contains("Rango") ? true : false;
    }


    public void PonerCondiciones(string campoModelo)
    {
        if (campoModelo.Contains("Fecha"))
        {
            EsFecha = true;
            condicionesShowList=condicionesDateList.Select(x => $"{campoModelo}, {x}, ").ToList();            
        }
        else
        {
            EsFecha = false;
            condicionesShowList=condicionesList.Select(x => $"{campoModelo}, {x}, ").ToList();
        }

        CampoFiltrar = condicionesShowList.FirstOrDefault();
        buscarString = string.Empty;
    }


    public void CerrarFiltrar(MudChip chip)
    {
        filtrosList.Remove(chip.Class);
        var propiedadFiltrar = chip.Class.BorrarTodosLosCaracteresDespuesDe(',');
        var indicePropiedadQuitarFiltro = modFiltroList.Select(x => x.NombrePropiedad).IndexOf(propiedadFiltrar); 
        modFiltroList[indicePropiedadQuitarFiltro].EstaVisible=true;
        modFiltroList[indicePropiedadQuitarFiltro].Condicion = string.Empty;
        TraerElementosFiltrados(indicePropiedadQuitarFiltro, string.Empty);
    }

    public void FechaCambiada(DateTime? value)
    {
        dateToFilter = value;
        FilterFunc();
    }

    public void RangoFechaCambiada(DateRange value)
    {
        rangoFecha = value;
        FilterFunc();
    }

    private void FilterFunc()
    {
        string FiltroAplicar = string.Empty;
        int indicePropiedadFiltrar = -1;

        if(!string.IsNullOrEmpty(CampoFiltrar) && (!string.IsNullOrEmpty(buscarString) || EsFecha))
        {
            var strToAdd = dateToFilter != null ? dateToFilter?.ToString(Constantes.FORMATO_FECHA) ?? DateTime.Today.ToString(Constantes.FORMATO_FECHA) : buscarString;
            if(dateToFilter != null)
            {
                strToAdd = dateToFilter?.ToString(Constantes.FORMATO_FECHA) ?? DateTime.Today.ToString(Constantes.FORMATO_FECHA);
            }
            else if (rangoFecha!=null)
            {
                strToAdd = rangoFecha.Start?.ToString(Constantes.FORMATO_FECHA) + " -> " + rangoFecha.End?.ToString(Constantes.FORMATO_FECHA);
            }
            else
            {
                strToAdd=buscarString;
            }
            EsRangoFecha = false;
            FiltroAplicar = CampoFiltrar + strToAdd;
            filtrosList.Add($"{FiltroAplicar}");
            var propiedadFiltrar = FiltroAplicar.BorrarTodosLosCaracteresDespuesDe(',');
            indicePropiedadFiltrar = modFiltroList.Select(x => x.NombrePropiedad).IndexOf(propiedadFiltrar); 
            modFiltroList[indicePropiedadFiltrar].EstaVisible=false;
            modFiltroList[indicePropiedadFiltrar].Condicion = FiltroAplicar.ExtraerCadenaEntreDosComas();
            if(indicePropiedadFiltrar>=0)
               TraerElementosFiltrados(indicePropiedadFiltrar, strToAdd);
        }
    }

    public void TraerElementosFiltrados(int index, string valorActualizar)
    {
        
         modFiltroList[index].ValorBusqueda = valorActualizar;
         FiltroGeneral =  modFiltroList.AplicarFiltrar();
         AnularElementos();
         ObtenerElementos(1).GetAwaiter().GetResult();
        
    }

    void AnularElementos()
    {
        CampoFiltrar = string.Empty;
        dateToFilter = null;
        rangoFecha = null;
        buscarString = string.Empty;
    }

    public async Task ObtenerElementos(int numberPage=1)
    {
        _loading = true;
        var filtro = string.IsNullOrEmpty(FiltroGeneral) ? "" : FiltroGeneral;
        var consRequest = new ConsultaAuditoriaOperacionRequest(){Cantidad=NUMBER_ELEMENTS_PAGE, Omitir=(numberPage-1)*NUMBER_ELEMENTS_PAGE, Filtro=filtro};
        try
        {
            var respuesta = await _httpService.Post<ConsultaAuditoriaOperacionRequest, List<AuditLog>>("/api/Logs", consRequest);
            if (respuesta.Exitoso)
            {
                Elements = respuesta.Response;
            }

            else
                _toaster.Error("Fallo al Obtener Elementos");
        }
        catch(Exception)
        {
            _toaster.Error("Ha ocurrido un error con la consulta");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }

    }



    
}