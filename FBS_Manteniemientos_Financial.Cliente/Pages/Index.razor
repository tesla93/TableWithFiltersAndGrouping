@page "/"
@inject HttpClient _httpclient
@inject Sotsera.Blazor.Toaster.IToaster _toaster
@inject NavigationManager _navigationManager
@attribute [Authorize]
@inject ILocalStorageService _localStorageService
@inject IHttpService _httpService
@using FBS_Manteniemientos_Financial.Cliente.Modelos


<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<div class="d-flex row">
    <MudChipSet AllClosable="true" Class="col-auto mt-3" OnClose="Closed">
        @foreach (var value in values)
        {
            <MudChip Color="Color.Primary" Text="@value"></MudChip>
        }
    </MudChipSet>
    @if (MostrarFiltros)
    {
        <MudItem xs="12" sm="6" md="2" Class="mr-auto">
            <MudSelect T="string" Label="Campo" SelectedValuesChanged="AplicarFiltros" Variant="Variant.Text" @bind-Value="CampoAFiltrar" OffsetY="true" Margin="Margin.Dense" Dense="true">
                @foreach (var campoModelo in camposModelo)
                {
                    <MudSelectItem Value="campoModelo" />
                }
            </MudSelect>
        </MudItem>
    }

    else
    {

        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Disabled="false" Class="mr-auto mt-3" aria-label="add" Size="Size.Small" IconSize="Size.Small" OnClick="Agrupar" />
    }

    <div class="col-3 ml-auto">
        <MudTextField @bind-Value="buscarString" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </div>

</div>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="auto" Filter="new Func<AuditLog, bool>(FilterFunc1)" FixedHeader="true"
          Items="@Elements"
          Class="mt-3"
          GroupBy="@(values.Any() ?_groupDefinition : null)"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="true">
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.Action)">Accion</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.TableName)">Nombre de Tabla</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.OldValues)">Viejos Valores</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.NewValues)">Nuevos Valores</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.MachineDate)">Fecha Maquina</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.SystemDate)">Fecha Sistema</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.UserName)">Nombre Usuario</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AuditLog, object>(x=>x.OfficeId)">Id Oficina</MudTableSortLabel></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="9">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Accion">@context.Action</MudTd>
        <MudTd DataLabel="Nombre de Tabla">@context.TableName</MudTd>
        <MudTd DataLabel="Viejos Valores">@context.OldValues</MudTd>
        <MudTd DataLabel="Nuevos Valores">@context.NewValues</MudTd>
        <MudTd DataLabel="Fecha Maquina'">@context.MachineDate</MudTd>
        <MudTd DataLabel="Fecha Sistema">@context.SystemDate</MudTd>
        <MudTd DataLabel="Nombre Usuario">@context.UserName</MudTd>
        <MudTd DataLabel="Id Oficina">@context.OfficeId</MudTd>

    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="9">Total: @context.Items.Count()</MudTh>
    </GroupFooterTemplate>
</MudTable>



@code
{

    public bool MostrarFiltros { get; set; } = false;
    public string CampoAFiltrar { get; set; }
    public string Condicion { get; set; }
    private string buscarString = "";
    public string ValorAFiltrar { get; set; }
    public bool DisabledButton { get; set; } = true;
    List<string> values = new List<string>();
    List<string> camposModelo = new List<string>();
    Func<AuditLog, object> campoAgrupar = new Func<AuditLog, object>(x => x.Action);

    public TableGroupDefinition<AuditLog> _groupDefinition;

    private IEnumerable<AuditLog> Elements = new List<AuditLog>();

    protected override async Task OnInitializedAsync()
    {
        camposModelo = new List<string>()
        {"Id", "Acciones", "Nombre de Tabla", "Viejos Valores", "Nuevos Valores",  "Nombre Usuario", "Id Oficina"};
        InicializarElementos();
    }

    public void InicializarElementos()
    {
        Elements = new List<AuditLog>
         {
             new AuditLog()
             {
                 Id=1, Action="Abrir", TableName="Nomina", OldValues="A", NewValues="B", MachineDate=new DateTime(2020, 6, 4),
                 SystemDate=new DateTime(2020, 7, 4), UserName="Admin", OfficeId="Matriz"
             },
              new AuditLog()
             {
                 Id=1, Action="Cerrar", TableName="Componente", OldValues="C", NewValues="D", MachineDate=new DateTime(2020, 8, 4),
                 SystemDate=new DateTime(2020, 9, 4), UserName="Carrillo", OfficeId="Matriz"
             },
              new AuditLog()
             {
                 Id=1, Action="Cerrar", TableName="Componente", OldValues="F", NewValues="G", MachineDate=new DateTime(2020, 8, 4),
                 SystemDate=new DateTime(2020, 9, 4), UserName="Admin", OfficeId="Checa"
             }
         };
    }





    public void Agrupar()
    {
        MostrarFiltros = true;
    }

    public void AplicarFiltros()
    {
        MostrarFiltros = false;
        if (values.Any())
        {
            //camposModelo.Add(values[0]);
            //values.RemoveAt(0);
        }
        values.Add($"{CampoAFiltrar}");
        _groupDefinition = ObtenerGrupos(values);
        camposModelo.Remove(CampoAFiltrar);
        CampoAFiltrar = string.Empty;
        Condicion = string.Empty;
        StateHasChanged();

    }

    public void Closed(MudChip chip)
    {
        camposModelo.Add(chip.Text);
        values.Remove(chip.Text);
        _groupDefinition = ObtenerGrupos(values);
    }

    public TableGroupDefinition<AuditLog> ObtenerGrupos(List<string> valoresSeleccionado)
    {
        string valorSeleccionado = string.Empty;
        if (valoresSeleccionado.Any())
        {
            valorSeleccionado = valoresSeleccionado[0];
        }


        switch (valorSeleccionado)
        {
            case "Id":
                {
                    return new TableGroupDefinition<AuditLog>()
                    {
                        GroupName = "Id",
                        Indentation = true,
                        Expandable = true,
                        IsInitiallyExpanded = false,
                        Selector = new Func<AuditLog, object>(x => x.Id),
                        InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                    };
                    break;
                }
            case "Acciones":
                {
                    return new TableGroupDefinition<AuditLog>()
                    {
                        GroupName = "Acciones",
                        Indentation = true,
                        Expandable = true,
                        IsInitiallyExpanded = false,
                        Selector = new Func<AuditLog, object>(x => x.Action),
                        InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                    };
                    break;
                }
            case "Nombre de Tabla":
                {
                    return new TableGroupDefinition<AuditLog>()
                    {
                        GroupName = "Nombre de Tabla",
                        Indentation = true,
                        Expandable = true,
                        IsInitiallyExpanded = false,
                        Selector = new Func<AuditLog, object>(x => x.TableName),
                        InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                    };
                    break;
                }
            case "Viejos Valores":
                {
                    return new TableGroupDefinition<AuditLog>()
                    {
                        GroupName = "Viejos Valores",
                        Indentation = true,
                        Expandable = true,
                        IsInitiallyExpanded = false,
                        Selector = new Func<AuditLog, object>(x => x.OldValues),
                        InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                    };
                    break;
                }
            case "Nuevos Valores":
                {
                    return new TableGroupDefinition<AuditLog>()
                    {
                        GroupName = "Nuevos Valores",
                        Indentation = true,
                        Expandable = true,
                        IsInitiallyExpanded = false,
                        Selector = new Func<AuditLog, object>(x => x.NewValues),
                        InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                    };
                    break;
                }
            case "Nombre Usuario":
                {
                    return new TableGroupDefinition<AuditLog>()
                    {
                        GroupName = "Nombre Usuario",
                        Indentation = true,
                        Expandable = true,
                        IsInitiallyExpanded = false,
                        Selector = new Func<AuditLog, object>(x => x.UserName),
                        InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                    };
                    break;
                }
            case "Id Oficina":
                {
                    return new TableGroupDefinition<AuditLog>()
                    {
                        GroupName = "Id Oficina",
                        Indentation = true,
                        Expandable = true,
                        IsInitiallyExpanded = false,
                        Selector = new Func<AuditLog, object>(x => x.OfficeId),
                        InnerGroup = ObtenerGrupos(valoresSeleccionado.Skip(1).ToList())
                    };
                    break;
                }
            default:
                {
                    return null;
                    break;
                }

        }
    }

    private bool FilterFunc1(AuditLog element) => FilterFunc(element, buscarString);

    private bool FilterFunc(AuditLog element, string buscarString)
    {
        if (string.IsNullOrWhiteSpace(buscarString))
            return true;
        if (element.Action.Contains(buscarString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TableName.Contains(buscarString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.UserName.Contains(buscarString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.OldValues.Contains(buscarString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.NewValues.Contains(buscarString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.OfficeId.Contains(buscarString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id}".Contains(buscarString))
            return true;
        return false;
    }

}